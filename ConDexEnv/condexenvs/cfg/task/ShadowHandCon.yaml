# used to create the object
name: ShadowHandCon

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym.
env: 
  numEnvs: ${resolve_default:16384,${...num_envs}}
  envSpacing: 0.75
  episodeLength: 51
  enableDebugVis: False
  aggregateMode: 1

  simpleHand: True
  rotObsType: 'euler' #'quat'
  constrained: False
  handRotation: True
  cemTrajGen: False
  startJointNoise: 0.0
  trajLen: 60
  customGenData: True
  pcl_hand: False
  hasBase: True
  fakeTendon: True
  genPclWithGround: False
  method: 'gf'
  stackFrameNumber: 5
  absStackFrame: True
  disableCollision: False

  clipObservations: 1.0
  clipActions: 1.0

  stiffnessScale: 1.0
  forceLimitScale: 1.0

  useRelativeControl: True
  dofSpeedScale: 20.0
  actionsMovingAverage: 1.0
  controlFrequencyInv: 3 # 2 Hz

  startPositionNoise: 0.01
  startRotationNoise: 0.0

  resetPositionNoise: 0.01
  resetRotationNoise: 0.0
  resetDofPosRandomInterval: 0.2
  resetDofVelRandomInterval: 0.0

  # Random forces applied to the object
  forceScale: 0.0
  forceProbRange: [0.001, 0.1]
  forceDecay: 0.99
  forceDecayInterval: 0.08

  # reward -> dictionary
  # distRewardScale: -10.0
  # rotRewardScale: 1.0
  # rotEps: 0.1
  # actionPenaltyScale: -0.0002
  # reachGoalBonus: 250
  # fallDistance: 0.24
  # fallPenalty: 0.0
  friction: 3.0

  max_points_per_object: 4096
  points_per_object: 1024
  rewardType: "ori_similarity0.1+omlift+sr1_ft64bz_lr1_5005"  # "ori_similarity_sr1_continous_os0.1_0.1as_2sigma_ft128bz_lr1_4050_normr" #"ori_similarity/std_similarity+objmoving+distw2o+distf2o+tsifdist+tsifsim+t1fcontact/t2fcontact/simplecontact+target_objmoving"
  rewardNormalize: False
  contactDetectionType: "continous"
  contactTime: 0.9
  contactReward: 1.0
  anyContactReward: 0.5
  anyContactThreshold: 0.015
  collisionReward: 0.05
  movingReward: 1.0
  successReward: 1
  similarityReward: 0.1
  similarityRewardFreq: 5
  closeDis: 0.1
  robotDone: False
  sampleGoal: False
  objectType: "block" # can be block, egg or pen
  observationType: "full_state" # can be "openai", "full_no_vel", "full", "full_state"
  subObservationType: "joint+fingertipjoint+wrist+objpcl+gf" #"joint+wrist+objpcl+gf+absfingertip/disfingertip/fingertipjoint+objpose+targetdiso2o"
  asymmetric_observations: False
  successTolerance: 0.1
  printNumSuccesses: False
  maxConsecutiveSuccesses: 0

  asset:
    assetType: "dexgraspnet" # dexgraspnet ddg
    assetSubType: "train" # train seencategory unseencategory
    assetFileName: "mjcf/open_ai_assets/hand/shadow_hand_simple.xml"
    # assetFileName: "gripper_model/combined.urdf"
    # assetFileNameBlock: "urdf/objects/cube_multicolor.urdf"
    # assetFileNameEgg: "mjcf/open_ai_assets/hand/egg.xml"
    # assetFileNamePen: "mjcf/open_ai_assets/hand/pen.xml"
    assetFileNameObjects: "objects/Grasp_Dataset_v3"

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

task:
  mode: 'train'
  eval_times: 3
  randomize: False
  randomization_params:
    frequency: 720   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      range_correlated: [0, .001 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      # schedule_steps: 40000
    actions:
      range: [0., .05]
      range_correlated: [0, .015] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      # schedule_steps: 40000
    sim_params: 
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        # schedule_steps: 40000
    actor_params:
      hand:
        color: True
        tendon_properties:
          damping:
            range: [0.3, 3.0]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          stiffness:
            range: [0.75, 1.5]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        dof_properties:
          damping: 
            range: [0.3, 3.0]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          stiffness: 
            range: [0.75, 1.5]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        rigid_shape_properties:
          friction: 
            num_buckets: 250
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
      object:
        scale:
          range: [0.95, 1.05]
          operation: "scaling"
          distribution: "uniform"
          setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
          # schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
          # schedule_steps: 30000
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            # schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        rigid_shape_properties:
          friction:
            num_buckets: 250
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000

sim:
  dt: 0.0083333333 #0.01667 # 1/60
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 8
    num_velocity_iterations: 0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2 
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)